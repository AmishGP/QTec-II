//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(QTec.Data.QTecDataContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets27cc13d6630ece41787c3843482be5105317e272a776599985f76945cd6835f0))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySets27cc13d6630ece41787c3843482be5105317e272a776599985f76945cd6835f0 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "27cc13d6630ece41787c3843482be5105317e272a776599985f76945cd6835f0"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.Designation")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.EmployeeLanguages")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.Employee")
            {
                return GetView2();
            }

            if (extentName == "CodeFirstDatabase.Language")
            {
                return GetView3();
            }

            if (extentName == "QTecDataContext.Designations")
            {
                return GetView4();
            }

            if (extentName == "QTecDataContext.EmployeeLanguages")
            {
                return GetView5();
            }

            if (extentName == "QTecDataContext.Employees")
            {
                return GetView6();
            }

            if (extentName == "QTecDataContext.Languages")
            {
                return GetView7();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Designation.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Designation
        [CodeFirstDatabaseSchema.Designation](T1.Designation_Id, T1.Designation_Name)
    FROM (
        SELECT 
            T.Id AS Designation_Id, 
            T.Name AS Designation_Name, 
            True AS _from0
        FROM QTecDataContext.Designations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.EmployeeLanguages.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing EmployeeLanguages
        [CodeFirstDatabaseSchema.EmployeeLanguages](T1.EmployeeLanguages_Id, T1.EmployeeLanguages_EmployeeId, T1.EmployeeLanguages_LanguageId, T1.EmployeeLanguages_Fluency)
    FROM (
        SELECT 
            T.Id AS EmployeeLanguages_Id, 
            T.EmployeeId AS EmployeeLanguages_EmployeeId, 
            T.LanguageId AS EmployeeLanguages_LanguageId, 
            T.Fluency AS EmployeeLanguages_Fluency, 
            True AS _from0
        FROM QTecDataContext.EmployeeLanguages AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Employee.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Employee
        [CodeFirstDatabaseSchema.Employee](T1.Employee_EmployeeId, T1.Employee_FirstName, T1.Employee_LastName, T1.Employee_DesignationId, T1.Employee_DateOfBirth, T1.Employee_Salary, T1.Employee_Email, T1.Employee_Gender)
    FROM (
        SELECT 
            T.EmployeeId AS Employee_EmployeeId, 
            T.FirstName AS Employee_FirstName, 
            T.LastName AS Employee_LastName, 
            T.DesignationId AS Employee_DesignationId, 
            T.DateOfBirth AS Employee_DateOfBirth, 
            T.Salary AS Employee_Salary, 
            T.Email AS Employee_Email, 
            CAST(T.Gender AS [Edm.Int32]) AS Employee_Gender, 
            True AS _from0
        FROM QTecDataContext.Employees AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Language.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Language
        [CodeFirstDatabaseSchema.Language](T1.Language_LanguageId, T1.Language_Name)
    FROM (
        SELECT 
            T.LanguageId AS Language_LanguageId, 
            T.Name AS Language_Name, 
            True AS _from0
        FROM QTecDataContext.Languages AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for QTecDataContext.Designations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Designations
        [QTec.Data.Designation](T1.Designation_Id, T1.Designation_Name)
    FROM (
        SELECT 
            T.Id AS Designation_Id, 
            T.Name AS Designation_Name, 
            True AS _from0
        FROM CodeFirstDatabase.Designation AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for QTecDataContext.EmployeeLanguages.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing EmployeeLanguages
        [QTec.Data.EmployeeLanguages](T1.EmployeeLanguages_Id, T1.EmployeeLanguages_EmployeeId, T1.EmployeeLanguages_LanguageId, T1.EmployeeLanguages_Fluency)
    FROM (
        SELECT 
            T.Id AS EmployeeLanguages_Id, 
            T.EmployeeId AS EmployeeLanguages_EmployeeId, 
            T.LanguageId AS EmployeeLanguages_LanguageId, 
            T.Fluency AS EmployeeLanguages_Fluency, 
            True AS _from0
        FROM CodeFirstDatabase.EmployeeLanguages AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for QTecDataContext.Employees.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Employees
        [QTec.Data.Employee](T1.Employee_EmployeeId, T1.Employee_FirstName, T1.Employee_LastName, T1.Employee_DesignationId, T1.Employee_DateOfBirth, T1.Employee_Salary, T1.Employee_Email, T1.Employee_Gender)
    FROM (
        SELECT 
            T.EmployeeId AS Employee_EmployeeId, 
            T.FirstName AS Employee_FirstName, 
            T.LastName AS Employee_LastName, 
            T.DesignationId AS Employee_DesignationId, 
            T.DateOfBirth AS Employee_DateOfBirth, 
            T.Salary AS Employee_Salary, 
            T.Email AS Employee_Email, 
            CAST(T.Gender AS [QTec.Data.Gender]) AS Employee_Gender, 
            True AS _from0
        FROM CodeFirstDatabase.Employee AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for QTecDataContext.Languages.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Languages
        [QTec.Data.Language](T1.Language_LanguageId, T1.Language_Name)
    FROM (
        SELECT 
            T.LanguageId AS Language_LanguageId, 
            T.Name AS Language_Name, 
            True AS _from0
        FROM CodeFirstDatabase.Language AS T
    ) AS T1");
        }
    }
}
